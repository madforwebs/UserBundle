<?php


/*
 * This file is part of the MadForWebs package
 *
 * Copyright (c) 2017 Fernando Sánchez Martínez
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author Fernando Sánchez Martínez <fer@madforwebs.com>
 */

namespace MadForWebs\UserBundle\Entity;


use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use FOS\UserBundle\Model\User as BaseFOSUser;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File as SFile;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Validator\Constraints as Assert;
use Vich\UploaderBundle\Mapping\Annotation as Vich;

/**
 * @ORM\MappedSuperclass
 */
class User extends BaseFOSUser
{
    /**
     * Encrypted password. Must be persisted.
     *
     * @var string
     */
    protected $newPass;

    /**
     * @ORM\Column(type="string")
     */
    private $firstName = '';

    /**
     * @ORM\Column(type="string")
     */
    private $lastName = '';

    /**
     * @ORM\Column(type="string")
     */
    private $hash = '';

    /**
     * @ORM\Column(type="string")
     */
    private $image = '';

    /**
     * @Assert\Image(maxWidth=1200, maxHeight=1200, minWidth=200, minHeight=200)
     * @Vich\UploadableField(mapping="image", fileNameProperty="image")
     */
    private $imageFile;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    private $disabledAt;

    /**
     * @ORM\Column(type="datetime", nullable=true)
     */
    private $validatedTokenTo;

    /**
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(type="datetime")
     */
    private $createdAt;

    /**
     * @Gedmo\Timestampable(on="update")
     * @ORM\Column(type="datetime")
     */
    private $updatedAt;

    public function getMainClient()
    {
        if(isset($this->getClients()[0])){
            return $this->getClients()[0];
        }
    }

    public function __construct()
    {
        parent::__construct();
        $this->setHash(sha1(uniqid(true).time().'a'));
    }

    public function isGranted($role)
    {
        $inRoles = in_array($role, $this->getRoles());
        if (!$inRoles) {
            return false;
        }
        return $inRoles;
    }

    /**
     * @return string
     */
    public function __toString()
    {
        return sprintf('%s', $this->getFullName());
    }

    /**
     * @return string
     */
    public function getFullName()
    {
        return trim($this->getFirstName().' '.$this->getLastName());
    }

    public function setEmail($email)
    {
        return parent::setEmail($email); // TODO: Change the autogenerated stub
    }


    /**
     * @return Group[]
     */
    public function getGroups()
    {
        return (!is_null($this->groups)) ? $this->groups : array();
    }

    /**
     * @return Group[]
     */
    public function getGroupsEnabled()
    {
        $groups = [];
        if (!is_null($this->getGroups())) {
            foreach ($this->getGroups() as $group) {
                if ($group->getIsEnabled()) {
                    $groups[] = $group;
                }
            }
        }

        return $groups;
    }



    /**
     * {@inheritdoc}
     */
    public function getRoles()
    {
        $roles = $this->roles;

        // we need to make sure to have at least one role
        $roles[] = static::ROLE_DEFAULT;

        return array_unique($roles);
    }

    /**
     * @return User[]
     */
    public function getArrayGroups()
    {
        $groups = $this->getGroupsEnabled();
        $arrGroups = [];
        foreach ($groups as $group) {
            $arrGroups[$group->getId()] = $group;
        }

        return array_values($arrGroups);
    }

    /**
     * @param string $firstName
     *
     * @return User
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;
    }

    /**
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * @param string $lastName
     *
     * @return User
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;
    }

    /**
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * @param \DateTime $createdAt
     *
     * @return User
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;
    }

    /**
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * @param \DateTime $updatedAt
     *
     * @return User
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }


    /**
     * @param \DateTime $disabledAt
     *
     * @return User
     */
    public function setDisabledAt($disabledAt)
    {
        $this->disabledAt = $disabledAt;
    }

    /**
     * @return \DateTime
     */
    public function getDisabledAt()
    {
        return $this->disabledAt;
    }


    /**
     * @param string $hash
     *
     * @return User
     */
    public function setHash($hash)
    {
        $this->hash = $hash;
    }

    /**
     * @return string
     */
    public function getHash()
    {
        return $this->hash;
    }

    /**
     * @param string $image
     *
     * @return User
     */
    public function setImage($image)
    {
        $this->image = (string)$image;
    }

    /**
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }

    /**
     * @return string
     */
    public function hasImage()
    {
        return $this->getImage() ? true : false;
    }

    /**
     * @return mixed
     */
    public function getImageFile()
    {
        return $this->imageFile;
    }

    /**
     * @param SFile|UploadedFile|null $image
     */
    public function setImageFile(SFile $image = null)
    {
        $this->imageFile = $image;

        if ($image) {
            $this->updatedAt = new \DateTime();
        }
    }


    /**
     * @ORM\PrePersist()
     */
    public function prePersist()
    {
        $this->setCreatedAt(new \DateTime("now"));
        $this->setUpdatedAt(new \DateTime("now"));
    }

    /**
     * @ORM\PreUpdate()
     */
    public function preUpdate()
    {
        $this->setUpdatedAt(new \DateTime("now"));
    }

    /**
     * @return mixed
     */
    public function getValidatedTokenTo()
    {
        return $this->validatedTokenTo;
    }

    /**
     * @param mixed $validatedTokenTo
     */
    public function setValidatedTokenTo($validatedTokenTo)
    {
        $this->validatedTokenTo = $validatedTokenTo;
    }

    /**
     * @return string
     */
    public function getNewPass()
    {
        return $this->newPass;
    }

    /**
     * @param string $newPass
     */
    public function setNewPass($newPass)
    {
        $this->newPass = $newPass;
    }

    public function toJSON()
    {
        $itemJSON = array();
        $itemJSON['id'] = $this->getId();
        $itemJSON['username'] = $this->getUsername();
        $itemJSON['enabled'] = $this->isEnabled();
        $itemJSON['createdAt'] = $this->getCreatedAt()->format('Y-m-d H:i:s');
        return $itemJSON;
    }
}

